#ifndef	_HY5610V_H__
#define	_HY5610V_H__

//----------------------------------------------------//
//                  基本参数设置参数                  //
//----------------------------------------------------//

int _stdcall HY5610V_initial(void);
/***************************初始化卡*******************************
功能：初始化运动控制卡
(1)返回值>0时，表示HY5610V卡的数量。如果为3，则下面的可用卡号分别为0、1、2；
(2)返回值=0时，说明没有安装HY5610V卡；
(3)返回值<0时，-1表示没有安装端口驱动程序，-2表示PCI桥故障。
******************************************************************/

int _stdcall HY5610V_end(void);
/******************************释放卡******************************
功能：释放控制卡资源
返回值	   0：正确			1：错误
此函数应在程序结束时调用。（仅用于Windows NT/2000）。
用于将HY5610V卡占用的资源释放。
******************************************************************/


int _stdcall set_triangle_prevent(int cardno,int value);
/*****************************设置三角波形防止功能*****************************
功能：设置是否启用三角波形防止功能
参数：
cardno	   卡号
value	   0：禁用		        1：启用

  返回值	       0：正确 				1：错误
  默认模式：启用三角波形防止功能
******************************************************************/

int _stdcall set_stop0_mode(int cardno,int axis,int value,int logic);
/*********************设定stop0输入信号的模式**********************
功能：设置stop0信号的有效/无效和逻辑电平
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	    0：无效			1：有效
	logic		0：低电平停止	1：高电平停止
返回值	        0：正确			1：错误
默认模式为：：无效，低电平停止
******************************************************************/

int _stdcall set_stop1_mode(int cardno,int axis,int value,int logic);
/*********************设定stop1输入信号的模式**********************
功能：设置stop1信号的有效/无效和逻辑电平
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	    0：无效			1：有效
	logic		0：低电平停止	1：高电平停止
返回值	        0：正确			1：错误
默认模式为：：无效，低电平停止
******************************************************************/

int _stdcall set_stop2_mode(int cardno,int axis,int value,int logic);
/*********************设定stop2输入信号的模式**********************
功能：设置stop2信号的有效/无效和逻辑电平
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	    0：无效			1：有效
	logic		0：低电平停止	1：高电平停止
返回值			0：正确			1：错误
默认模式为：：无效，低电平停止
STOP2信号有效时同时可清除实位计数器。
******************************************************************/

int _stdcall set_actualcount_mode(int cardno,int axis,int value,int dir,int freq);
/**********************设置实位计数器的工作方式********************
功能：设置实际位置计数器的工作模式
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	   输入脉冲方式
				0：A/B脉冲输入	1：上/下（PPIN/PMIN）脉冲输入
	dir		   计数方向
	0：	A超前B或PPIN脉冲输入向上计数			B超前A或PMIN脉冲输入向下计数
	1： B超前A或PMIN脉冲输入向上计数			A超前B或PPIN脉冲输入向下计数
	freq		A/B脉冲输入时的倍频，上/下脉冲输入时无效
			0：4倍频
			1：2倍频
			2：不倍频
返回值	   0：正确			1：错误
默认模式为：A/B相脉冲输入，方向为0，4倍频
******************************************************************/

int _stdcall set_pulse_mode(int cardno,int axis,int value,int logic,int dir_logic);
/**********************设置输出脉冲的工作方式**********************
功能：设置输出脉冲的工作方式
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value 	   0： 脉冲+脉冲方式     1：脉冲+方向方式
	logic	   0：	正逻辑脉冲		 1：	负逻辑脉冲
	dir-logic  0：方向输出信号正逻辑 1：方向输出信号负逻辑
返回值	       0：正确				 1：错误
默认模式为：脉冲+方向方式，正逻辑脉冲，方向输出信号正逻辑
******************************************************************/

int _stdcall set_limit_mode(int cardno,int axis,int value,int logic);
/**************设定正/负方向限位输入nLMT信号的模式设定*************
功能：设定正/负方向限位输入nLMT信号的模式
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value		0：有效时立即停止	1：有效时减速停止
	logic		0：低电平有效		1：高电平有效
返回值	        0：正确				1：错误
默认模式为：立即停止，低电平有效
M注意： 限位信号不能设置成有效/无效。
******************************************************************/

int _stdcall set_softlimit_mode1(int cardno,int axis,int value);
/*******************COMP+寄存器做软件限制的设定********************
功能：COMP+寄存器用作软件正限位的设置
参数：
	cardno	   卡号
	axis	    轴号（1-4）
	value	   0：无效				1：有效
返回值		   0：正确				1：错误
默认模式为: 无效
******************************************************************/

int _stdcall set_softlimit_mode2(int cardno,int axis,int value);
/*******************COMP-寄存器做软件限制的设定********************
功能：COMP-寄存器用作软件负限位的设置
参数：
	cardno	   卡号
	axis	   轴号（1-4）
	value	   0：无效				1：有效
返回值		   0：正确				1：错误
默认模式为: 无效
******************************************************************/

int _stdcall set_softlimit_mode3(int cardno,int axis,int value);
/*******************COMP+/-寄存器的比较对象设定********************
功能：COMP+/-寄存器用作软件限位时比较对象的设置
参数：
	cardno	   卡号
	axis	   轴号（1-4）
	value	   0：逻辑位置计数器	1：实际位置计数器
返回值		   0：正确				1：错误
默认模式为 : 逻辑位置计数器
******************************************************************/

int _stdcall get_out(int cardno, int number);
/******************获取输出状态****************
日期:080222
参数:
	cardno       卡号
	number       端口号
返回值:指定端口的当前状态,-1表示参数错误    
***********************************************/

int _stdcall disable_soft_limit(int cardno, int axis);
/***************************软件限位无效***************************
功能:	禁用软件限位
参数:
	cardno       卡号
	axis         轴号
返回值         0:正确                 1:错误  
*******************************************************************/

int _stdcall enable_soft_limit(int cardno, int axis, int value);
/****************************软件限位有效***************************
功能:	使用软件限位
参数:
	cardno       卡号
	axis         轴号
	value        比较对象 (0:逻辑计数器,1:实际位置计数器)
返回值       0:正确                 1:错误  
*******************************************************************/

int _stdcall set_inpos_mode(int cardno,int axis,int value,int logic);
/**********************伺服到位信号nINPOS的设定********************
功能：设置伺服到位信号nINPOS的工作模式
参数：
	cardno	   卡号
	axis	   轴号（1-4）
	value	   0：无效				1：有效
	logic	   0：低电平有效		1：高电平有效
返回值		   0：正确				1：错误
默认模式为 : 无效，低电平有效
******************************************************************/

int _stdcall set_alarm_mode(int cardno,int axis,int value,int logic);
/*********************伺服报警信号nALARM的设定*********************
功能：设置伺服报警信号nALARM的工作模式
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value		0：无效					1：有效
	logic		0：低电平有效			1：高电平有效
返回值			0：正确					1：错误
默认模式为 : 无效，低电平有效
******************************************************************/

int _stdcall set_ad_mode(int cardno,int axis,int value);
/***********************加/减速方式的设定**************************
功能：设置加减速是采用直线加减速还是S曲线加减速
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	   0：直线加/减速			1：S曲线加/减速
返回值		   0：正确					1：错误
默认模式为 : 直线加/减速
******************************************************************/

int _stdcall set_dec1_mode(int cardno,int axis,int value);
/*********************非对称梯形加/减速的设定**********************
功能：设置对称加减速还是非对称加减速
参数：
	cardno	   卡号
	axis		轴号(1-4)
	value	     减速度使用
				0：加速度的值(即对称加减速)
				1：减速度的值(即非对称加减速)
返回值			0：正确				    	1：错误
默认模式为 : 对称加减速
******************************************************************/

int _stdcall set_dec2_mode(int cardno,int axis,int value);
/*******************加/减速定量驱动的减速方式的设定****************
功能：设置减速模式
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	   0：自动减速				1：手动减速              
返回值	       0：正确					1：错误
默认模式为 : 自动减速
******************************************************************/

int _stdcall set_circle_mode(int cardno,int axis,int value);
/*******************计数器的可变环功能的设定*****************
功能：设置计数器可变环形的模式
参数：
	cardno	   卡号
	axis	   轴号（1-4）
	value 	   0：无效					1：有效
返回值		   0：正确					1：错误
默认模式为 : 无效
******************************************************************/

int _stdcall set_input_filter(int cardno,int axis,int number,int value);
/************************输入信号滤波功能设置**********************
功能：设置输入信号的滤波功能
参数：
	cardno	   卡号
	axis		轴号（1-4）
	number	    输入类别
				1：LMT+、LMT-、STOP0、STOP1
				2：STOP2
				3：nINPOS、nALARM
				4：nIN
				即可分别设置上面四类输入信号的滤波状态
	value		0：滤波无效		 1：滤波有效
返回值          0：正确          1：错误
默认模式为 : 无效
******************************************************************/

int _stdcall set_filter_time(int cardno,int axis,int value);
/*********************输入信号滤波时间常数设置卡*******************
功能：设置输入信号的滤波时间常数
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	    可以除去最大噪音幅度(范围)   输入信号延迟(范围)
返回值         0：正确          1：错误
******************************************************************/

int _stdcall set_lock_position(int cardno, int axis,int regi=0,int logical=0);
/****************************位置锁存设置函数**********************
功能:设置到位信号功能,锁定所有轴的逻辑位置和实际位置
参数:
	axis―参照轴
	regi―计数器模式  |0:逻辑位置
					  |1:实际位置 
	logical―电平信号 |0:由高到低 
				      |1:由低到高
返回值         0：正确          1：错误
	说明:使用指定轴axis的IN信号作为触发信号						  
*******************************************************************/

//----------------------------------------------------//
//                  驱动状态检查函数                  //
//----------------------------------------------------//

int _stdcall get_status(int cardno,int axis,int *value);
/*************************获取各轴的驱动状态***********************
功能：获取单轴的驱动状态
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value		驱动状态的指针
				0：驱动结束             非0：value为两个字节长度的值
返回值	    0：正确					1：错误
******************************************************************/

int _stdcall get_stopdata(int cardno,int axis,int *value);
/*************************获取各轴的错误停止信息*******************
功能：获取各轴的错误停止信息
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	   错误状态的指针
	 			0：无错误                非0：value为两个字节长度的值
返回值         0：正确          1：错误
******************************************************************/

int _stdcall get_inp_status(int cardno,int *value);
/************************获取插补的驱动状态************************
功能：获取插补运动的驱动状态
参数：
	cardno	   卡号
	value	    插补状态的指针
				0：插补结束			       1：正在插补
返回值	    0：正确					   1：错误
******************************************************************/

int _stdcall get_inp_status2(int cardno,int *value);
/************************取连续插补的允许写入状态******************
功能：获取连续插补的允许写入状态
参数：
	cardno	   卡号
	value	   状态的指针
				0：不允许写入				1：允许写入
返回值	   0：正确				    	1：错误
******************************************************************/

int _stdcall get_lock_status(int cardno, int axis, int *status);
/*************************获取同步操作的状态***********************
功能:获取同步操作的状态
参数:
	cardno      卡号
	axis         轴号
	status―0|未执行同步操作
			1|执行过同步操作
返回值         0：正确          1：错误
	说明:利用该函数可以捕捉位置锁存是否执行		
******************************************************************/

int _stdcall get_home_status(int cardno, int axis, int *status, int *err);
/**************************原点驱动状态函数************************
功能:获取回原点是否结束,以及判断是否有错误
参数：
	cardno      卡号
	axis        轴号
    status―驱动状态,0|驱动结束
	                 1|正在驱动
	err―错误标志,   0|正确
	                 1|错误  
返回值         0：正确          1：错误
******************************************************************/

int _stdcall get_home_error(int cardno, int axis ,int *err);
/************************获取回原点出错信息************************
功能:获取回原点出错原因    
参数:	        
      err―错误标志 
				0  |正确
	            非0|错误  
				D0:comp+限位
				D1:comp-限位
				D2:LMT+限位
				D3:LMT-限位
				D4:伺服报警
				D5:紧急停止
				D6:Z相信号超前到达
返回值         0：正确          1：错误
******************************************************************/

//----------------------------------------------------//
//                  运动参数设定函数                  //
//----------------------------------------------------//

int _stdcall set_range(int cardno, int axis,long Value);
/*****************************范围设定*****************************
功能：设定范围
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	   R值 范围（8000000-16000）
返回值	   0：正确				1：错误
******************************************************************/

int _stdcall set_acac(int cardno, int axis,long Value);
/************************加/减速度的变化率设定*********************
功能：设定加/减速度的变化率
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	    K值（1-65535）
返回值	   0：正确				1：错误
******************************************************************/

int _stdcall set_acc(int cardno, int axis,long Value);
/****************************加速度设定****************************
功能：设定加速度的值
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	    A值（1-8000）
返回值	    0：正确				1：错误
******************************************************************/

int _stdcall set_dec(int cardno, int axis,long Value);
/*****************************减速度设定***************************
功能：设定减速度的值
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	    D值（1-8000）
返回值	    0：正确				1：错误
******************************************************************/

int _stdcall set_startv(int cardno, int axis,long Value);
/****************************初始速度设定**************************
功能：设定起步速度的值
参数：
	cardno	   卡号
	axis		轴号(1-4)
	value       SV值(1-8000)
返回值	    0：正确				1：错误
******************************************************************/

int _stdcall set_speed(int cardno, int axis,long Value);
/****************************驱动速度设定**************************
功能：设定驱动速度的值
参数：
	cardno	   卡号
	axis		轴号(1-4)
	value	   V值(1-8000)
返回值	   0：正确				1：错误
******************************************************************/

int _stdcall set_command_pos(int cardno, int axis,long Value);
/**************************逻辑位置计数器设定**********************
功能：设定逻辑位置计数器值
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	   范围值（-2147483648~+2147483647）
返回值	   0：正确				1：错误
逻辑位置计数器任何时候都能写、任何时候都能读
******************************************************************/

int _stdcall set_actual_pos(int cardno, int axis,long Value);
/**************************实际位置计数器设定**********************
功能：设定实际位置计数器值
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	   范围值（-2147483648~+2147483647）
返回值	   0：正确				1：错误
实际位置计数器任何时候都能写、任何时候都能读
******************************************************************/

int _stdcall set_comp1(int cardno, int axis,long Value);
/**************************COMP+寄存器设定*************************
功能：设定COMP+寄存器的值
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value       范围值（-2147483648~+2147483647）
返回值	   0：正确				1：错误
COMP+寄存器任何时候都能写
******************************************************************/

int _stdcall set_comp2(int cardno, int axis,long Value);
/*************************COMP-寄存器设定**************************
功能：设定COMP-寄存器的值
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	   范围值（-2147483648~+2147483647）
返回值	   0：正确				1：错误
COMP-寄存器任何时候都能写
******************************************************************/


int _stdcall set_soft_limit(int cardno, int axis, long value1, long value2);
/**************************设定软件限位的值************************
功能:	设置软件限位的值
参数:
	cardno       卡号
	axis         轴号
	value1       正向限位值
    value2       负向限位值
返回值      0:正确              1:错误  
*******************************************************************/

int _stdcall set_dec_pos(int cardno, int axis,long Value);
/***************************手动减速点设定*************************
功能：设定COMP+寄存器的值
参数：
	cardno	   卡号
	axis		轴号（1-4）
	value	   范围值（0~268435455）
返回值	   0：正确				1：错误
在使用手动减速模式时必须设定好手动减速点
******************************************************************/

int _stdcall set_vector_speed(int cardno, int mode);
/************************固定线速度模式设置************************
功能:固定线速度模式设置
参数:
	cardno 卡号   
	mode―0|不采用固定线速度
		  1|采用固定线速度
返回值         0：正确          1：错误
	说明:线速度是指矢量速度,固定线速度可以保证插补时合成速度固定
******************************************************************/

int _stdcall set_home_mode(int cardno, int axis,long speed,int logical0, int logical1, int logical2,int offset,int dir0, int dir1, int dir2,int offsetdir,int clear,long pulse);
/******************************原点模式设置************************
功能：设置指定轴回原点的模式
参数:
	   logical0―stop0|0:低电平停止
					  |1:高电平停止
					  |-1:无效
	   logical1―stop1|0:低电平停止
					  |1:高电平停止
					  |-1:无效	
	   logical2―stop2|0:低电平停止
					  |1:高电平停止
					  |-1:无效	   
       0ffset― 0|不偏移原点
	            1|偏移原点
	   dir0―表示方向|0:正向
	                 |1:负向 
	   dir1―表示方向|0:正向
	                 |1:负向 
	   dir2―表示方向|0:正向
	                 |1:负向 	   
	   offsetdir―表示方向|0:正向
	                      |1:负向 				 
	   speed―低速搜寻速度，要求低于高速初始速度
	   clear―是否清除计数器|0:清除为零
	                        |1:不清除 
返回值         0：正确          1：错误
   说明:
		(1)回原点分为四大步:
		   |第一步:快速接近stop0(logical0近原点设置);
		   |第二步:慢速接近stop1(logical1原点设置);
		   |第三步:慢速接近stop2(logical2编码器Z相);
		   |第四步:偏移距离(用于工作原点);
        (2)上述四步可以选择是否执行,通过logical0、logical1、logical2和offset来选择
		(3)可以使用一个接近开关充当几个信号使用
******************************************************************/

int _stdcall set_symmetry_speed(int cardno,int axis,long lspd,long hspd,double tacc,long vacc,int mode);
/**************************设定对称加减速度************************
功能:	设定对称加减速的值
参数:
	cardno       卡号
	axis         轴号
	lspd         起步速度
    hspd         驱动速度
	tacc         加速时间
	vacc         加速度变化率
	mode         加速模式(0:梯形 1:S曲线)
返回值           0:正确          1:错误  
******************************************************************/


int _stdcall set_unsymmetry_speed(int cardno,int axis,long lspd,long hspd,double tacc,double tdec,long vacc,int mode);
/*************************设定非对称加减速度***********************
功能:	设定非对称加减速的值
参数:
	cardno       卡号
	axis         轴号
	lspd         起步速度
    hspd         驱动速度
	tacc         加速时间
	tdec         减速时间
	vacc         加速度变化率
	mode         加速模式(0:梯形 1:S曲线)
返回值           0:正确          1:错误  
******************************************************************/

//----------------------------------------------------//
//                  运动参数检查函数                  //
//----------------------------------------------------//

int _stdcall get_command_pos(int cardno,int axis,long *pos);
/***********************获取各轴的逻辑位置卡***********************
功能：获取轴的逻辑位置
参数：
	cardno	   卡号
	axis		轴号（1-4）
	pos		   逻辑位置值的指针
返回值	   0：正确			1：错误
此函数可随时得到轴的逻辑位置，在电机未失步的情况下，pos的值表示轴的当前位置。
******************************************************************/

int _stdcall get_actual_pos(int cardno,int axis,long *pos);
/************************获取各轴的实际位置************************
功能：获取轴的实际位置
参数：
	cardno	   卡号
	axis		轴号（1-4）
	pos		   实际位置值的指针
返回值		0：正确			1：错误
此函数可随时得到轴的实际位置，在电机有失步的情况下，pos的值依然表示轴的实际位置。
******************************************************************/

int _stdcall get_speed(int cardno,int axis,long *pos);
/*******************获取各轴的当前驱动速度*******************
功能：获取轴的当前驱动速度
参数：
	cardno	   卡号
	axis		轴号（1-4）
	speed	   当前驱动速度的指针
返回值		0：正确			1：错误
数据的单位和驱动设定数值V一样。
******************************************************************/

int _stdcall get_ad(int cardno,int axis,long *pos);
/**************************获取各轴的当前加速度********************
功能：获取轴的当前加速度
参数：
	cardno	   卡号
	axis		轴号（1-4）
	ad		   当前加速度的指针
返回值		0：正确			1：错误
数据的单位和驱动加速度设定数值A一样
******************************************************************/

int _stdcall get_lock_position(int cardno,int axis,long *pos);
/**************************获取锁定的位置**************************
功能:获取锁定的位置
参数:
	cardno      卡号
	axis         轴号
	pos         锁存的位置
返回值         0：正确          1：错误
******************************************************************/


int _stdcall get_lib_vision(int *ver);
/************************库函数版本号函数**************************
*功能:获取库函数版本
*参数:
      ver-版本号(前两位为主版本号,后两位为次版本号)
返回值         0：正确          1：错误
******************************************************************/

//----------------------------------------------------//
//                     驱动函数                       //
//----------------------------------------------------//

int _stdcall pmove(int cardno,int axis,long pulse);
/*****************************定量驱动*****************************
功能：单轴定量驱动
参数：
	cardno 	   卡号
	axis		轴号（1-4）
	pulse 	   输出的脉冲数            范围（-268435455~+268435455）
				>0：正方向移动		   <0：负方向移动
返回值	   0：正确				    1：错误
******************************************************************/

int _stdcall continue_move(int cardno,int axis,int dir);
/*****************************连续驱动*****************************
功能：单轴连续驱动
参数：
	cardno 	   卡号
	axis		轴号（1-4）
	dir		   驱动的方向
			  0：正方向移动		   1：负方向移动
返回值	      0：正确			   1：错误
******************************************************************/

int _stdcall dec_stop(int cardno,int axis);
/*****************************驱动减速停止*************************
功能：减速停止当前的驱动过程
参数：
	cardno	   卡号
	axis		轴号（1-4）
返回值	   0：正确				1：错误
******************************************************************/

int _stdcall sudden_stop(int cardno,int axis);
/******************************驱动立即停止************************
功能：立即停止当前的驱动过程
参数：
	cardno	   卡号
	axis		轴号（1-4）
返回值	   0：正确				1：错误
立即停止正在驱动中的脉冲输出，在加/减速驱动中也立即停止。
******************************************************************/

int _stdcall stop_axis(int cardno,int axis,int mode);
/*****************************停止单轴*****************************
功能:	单轴停止
参数:
	cardno       卡号
	axis         轴号 
	mode         停止模式(0:立即停止 1:减速停止)
返回值           0:正确          1:错误  
******************************************************************/

int _stdcall stop_all(int cardno,int mode);
/*****************************停止所有轴**************************
功能:	所有轴停止
参数:
	cardno       卡号	
	mode         停止模式(0:立即停止 1:减速停止)
返回值           0:正确          1:错误  
******************************************************************/


int _stdcall inp_move2(int cardno,int axis1,int axis2,long pulse1,long pulse2);
/***************************两轴直线插补***************************
功能：两轴直线插补运动
参数：
	cardno	   卡号
	axis1,axis2		   参与插补的轴号         1：X    2:Y  3：Z  4:A
	pulse1,pulse2	移动的相对距离    范围（-8388608~+8388607）
返回值	   0：正确			  	  1：错误
注意：插补的速度以axis1轴速度为基准
******************************************************************/

int _stdcall inp_cw_arc(int cardno,int axis1,int axis2, long x,long y,long i,long j);
/*************************顺时针CW圆弧插补*************************
功能：两轴顺时针圆弧插补运动
参数：
	cardno	   卡号
	axis1,axis2		   参与插补的轴号         1：X    2:Y  3：Z  4:A
	x,y		   圆弧插补的终点位置（相对于起点） 	   范围（-8388608~+8388607）
	i,j		   圆弧插补的圆心点位置（相对于起点）      范围（-8388608~+8388607）
返回值	   0：正确		 		  1：错误
注意：插补的速度以axis1轴速度为基准
******************************************************************/

int _stdcall inp_ccw_arc(int cardno,int axis1,int axis2,long x,long y,long i,long j);
/***************************逆时针CCW圆弧插补**********************
功能：两轴逆时针圆弧插补运动
参数：
	cardno	   卡号
	axis1,axis2		   参与插补的轴号      1：X    2:Y  3：Z  4:A
	x,y		   圆弧插补的终点位置（相对于起点）     范围（-8388608~+8388607）
	i,j	 	   圆弧插补的圆心点位置（相对于起点）   范围（-8388608~+8388607）
返回值	   0：正确				  1：错误
注意：插补的速度以axis1轴速度为基准
******************************************************************/
//2013.5.8
int _stdcall inp_cw_arc3(int cardno,int axis1,int axis2,int axis3, long x,long y,long i,long j);
/*************************顺时针CW圆弧插补*************************
功能：3轴顺时针圆弧插补运动
参数：
cardno	   卡号
axis1,axis2	,axis3	   参与插补的轴号         1：X    2:Y  3：Z  4:A
x,y		   圆弧插补的终点位置（相对于起点） 	   范围（-8388608~+8388607）
i,j		   圆弧插补的圆心点位置（相对于起点）      范围（-8388608~+8388607）
返回值	   0：正确		 		  1：错误
注意：插补的速度以axis1轴速度为基准,
第3轴axis3只选中，并不发脉冲，为配合3轴直线插补进行连续插补用。
******************************************************************/
//2013.5.8
int _stdcall inp_ccw_arc3(int cardno,int axis1,int axis2,int axis3,long x,long y,long i,long j);
/***************************逆时针CCW圆弧插补**********************
功能：两轴逆时针圆弧插补运动
参数：
cardno	   卡号
axis1,axis2	,axis3	   参与插补的轴号         1：X    2:Y  3：Z  4:A
x,y		   圆弧插补的终点位置（相对于起点）     范围（-8388608~+8388607）
i,j	 	   圆弧插补的圆心点位置（相对于起点）   范围（-8388608~+8388607）
返回值	   0：正确				  1：错误
注意：插补的速度以axis1轴速度为基准,
第3轴axis3只选中，并不发脉冲，为配合3轴直线插补进行连续插补用。
******************************************************************/

int _stdcall inp_move3(int cardno,int axis1,int axis2, int axis3,long pulse1,long pulse2,long pulse3);
/***********************三轴直线插补*************************
功能：三轴直线插补运动
参数：
	cardno 	   卡号
	axis1,axis2,axis3		   参与插补的轴号     1：X    2:Y  3：Z  4:A
	pulse1,pulse2,pulse3	  X-Y-Z轴移动的相对距离	 范围（-8388608~+8388607）  
	三轴插补只能进行X、Y、Z轴三轴插补
返回值	   0：正确				  1：错误
注意：插补的速度以axis1轴速度为基准
******************************************************************/

int _stdcall inp_dec_enable(int cardno);
/****************************插补减速允许**************************
功能：允许插补进行减速运动
参数：
	cardno 	   卡号
返回值         0：正确          1：错误
******************************************************************/

int _stdcall inp_dec_disable(int cardno);
/****************************插补减速禁止**************************
功能：不允许插补进行减速运动
参数：
	cardno	   卡号
返回值	    0：正确			 	     1：错误
******************************************************************/

int _stdcall manual_pmove(int cardno, int axis, long pulse);
/************************外部信号定量驱动函数**********************
功能:外部信号定量驱动函数
参数:
	cardno      卡号
	axis        轴号
	pulse       脉冲
返回值         0：正确          1：错误
	说明:(1)发出定量脉冲，但驱动没有立即进行，需要等到外部信号电平发生变化
		 (2)可以使用普通按钮,也可以接手轮
******************************************************************/

int _stdcall manual_continue(int cardno, int axis);
/************************外部信号连续驱动函数**********************
功能:外部信号连续驱动函数
参数:
	cardno     卡号
	axis       轴号
返回值         0：正确          1：错误
	说明:(1)发出定量脉冲，但驱动没有立即进行，需要等到外部信号电平发生变化
		 (2)可以使用普通按钮,也可以接手轮
******************************************************************/

int _stdcall manual_disable(int cardno, int axis);
/***********************关闭外部信号驱动使能***********************
功能:关闭外部信号驱动使能
参数：
	cardno      卡号
	axis        轴号
返回值         0：正确          1：错误
******************************************************************/

int _stdcall inp_step_command2(int cardno,int axis1,int axis2,long pulse1,long pulse2);
/*********************两轴命令步进插补设置函数*********************	
功能：设置两轴命令式步进插补的数据
参数:
	和两轴插补函数相同
返回值         0：正确          1：错误
	功能说明:发出步进插补的数据，但驱动没有进行,等待发出命令驱动函数
******************************************************************/


int _stdcall inp_step_command3(int cardno,int axis1,int axis2,int axis3,long pulse1,long pulse2, long pulse3);
/*********************三轴命令步进插补设置函数*********************
功能：设置三轴命令式步进插补的数据
参数:
	和三轴插补函数相同
返回值         0：正确          1：错误
	功能说明:发出步进插补的数据，但驱动没有进行,等待发出命令驱动函数
******************************************************************/

int _stdcall inp_step_move(int cardno);
/***********************步进插补命令驱动函数***********************
功能:单步执行命令步进插补
参数:
	cardno      卡号
返回值         0：正确          1：错误
	功能说明:根据设置函数设定的参数,以命令的方式驱动步进运动
******************************************************************/


int _stdcall inp_step_signal2(int cardno,int axis1,int axis2,long pulse1,long pulse2);
/*********************两轴信号步进插补设置函数**********************
功能：设置两轴信号式步进插补的数据
参数:
	和两轴插补函数相同
返回值         0：正确          1：错误
	功能说明:发出步进插补的数据，但驱动没有进行,等待外部信号电平下降到低电平
*******************************************************************/

int _stdcall inp_step_signal3(int cardno,int axis1,int axis2,int axis3,long pulse1,long pulse2, long pulse3);
/*********************三轴信号步进插补设置函数*********************
功能:设置三轴步进插补的数据
参数:
	和三轴插补函数相同
返回值         0：正确          1：错误
	功能说明:发出步进插补的数据，但驱动没有进行,等待外部信号电平下降到低电平
******************************************************************/

int _stdcall inp_step_stop(int cardno,int axis);
/*************************步进插补停止函数*************************	
功能:停止步进插补的执行过程
参数:
	cardno      卡号
	axis        轴号
返回值         0：正确          1：错误
	
	注意:处于步进插补的轴必须使用步进插补停止命令后,才能进行其它驱动
******************************************************************/

int _stdcall home(int cardno,int axis);
/****************************原点驱动函数**************************
功能:按照设定的方式,实现回原点的操作。
参数:
	cardno      卡号
	axis        轴号
返回值         0：正确          1：错误
******************************************************************/

int _stdcall clear_home_error(int cardno, int axis);
/***************************清除原点出错信息***********************
功能:清除原点出错信息
参数:
	cardno      卡号
	axis        轴号
返回值         0：正确          1：错误
******************************************************************/

int _stdcall set_in_move1(int cardno,int axis,int axis1,long pulse,long pulse1,int logical=0,int mode=0);
/**************************单轴随动设置函数************************
功能:IN同步运动设置函数
参数:
		axis―主动轴
		axis1―从动轴
		pulse―主动轴脉冲
		pulse1―从动轴脉冲
		logical―电平信号 |0:由高到低 
					      |1:由低到高					  
		mode―主动轴是否产生运动 0|主动轴不产生动作
								 1|主动轴动作
返回值         0：正确          1：错误
	说明:使用主动轴axis的IN信号作为触发信号						  
*******************************************************************/

int _stdcall set_in_move2(int cardno, int axis, int axis1,int axis2 ,long pulse,long pulse1,long pulse2,int logical=0,int mode=0);
/**************************两轴随动设置函数*************************
功能:设置IN同步动作
参数:
		axis―主动轴
		axis1―从动轴
		axis2―从动轴
		pulse1―脉冲
		pulse2―脉冲
		logical―电平信号 |0:由高到低 
					      |1:由低到高					  
		mode―主动轴是否产生运动 0|主动轴不产生动作
								 1|主动轴动作
返回值         0：正确          1：错误
	说明:使用主动轴的IN信号作为触发信号						  
********************************************************************/


int _stdcall set_in_move3(int cardno, int axis, int axis1,int axis2,int axis3 ,long pulse,long pulse1,long pulse2, long pulse3,int logical=0,int mode=0);
/**************************三轴随动设置函数**************************	
功能:设置IN同步动作
参数:
		axis―主动轴
		axis1―从动轴1
		axis2―从动轴2
		axis3―从动轴3
		pulse―主动轴的脉冲
		pulse1―从动轴1的脉冲
		pulse2―从动轴2的脉冲
		pulse3―从动轴3的脉冲
		logical―电平信号 |0:由高到低 
					      |1:由低到高	
		mode―主动轴是否产生运动 0|主动轴不产生动作
								 1|主动轴动作
返回值         0：正确          1：错误
	说明:使用主动轴的IN信号作为触发信号						  
**********************************************************************/

int _stdcall set_in_stop1(int cardno, int axis, int axis1, int logical=0, int mode=0);
/***************************单轴随停设置函数***************************
功能:设置IN同步动作
参数:
		axis―主动轴
		axis1―从动轴1
		logical―电平信号 |0:由高到低 
					      |1:由低到高
        mode―主轴停止 |0:停止
		              1|:不停
返回值         0：正确          1：错误
	说明:
		检测到信号变化,从动轴停止，主动轴驱动状态可以设置
**********************************************************************/


int _stdcall set_in_stop2(int cardno, int axis, int axis1,int axis2, int logical=0, int mode=0);
/**************************两轴随停设置函数***************************
功能:设置IN同步动作
参数:
		axis―主动轴
		axis1―从动轴1
		axis2―从动轴2
		logical―电平信号 |0:由高到低 
					      |1:由低到高
        mode―主轴停止 |0:停止
		              1|:不停
返回值         0：正确          1：错误
	说明:
		检测到信号变化,从动轴停止，主动轴驱动状态可以设置
*********************************************************************/


int _stdcall set_in_stop3(int cardno, int axis, int logical=0, int mode=0);
/***************************三轴随停设置函数*************************
功能:设置IN同步动作
参数:
		axis―主动轴		
		logical―电平信号 |0:由高到低 
					      |1:由低到高
        mode―主轴停止 |0:停止
		              1|:不停
返回值         0：正确          1：错误
说明:
		检测到信号变化,从动轴停止，主动轴驱动状态可以设置

*********************************************************************/


int _stdcall set_comp_pmove1(int cardno, int axis, int axis1, long pulse, long pulse1, int regi, int term);
/**********************到达目标位置单轴驱动设置***********************
功能:到达目标位置单轴驱动设置
参数:
		axis―主动轴
		axis2―从动轴
		pulse1―主动轴的目标位置
		pulse2―从动轴的驱动脉冲
		regi―0|comp+  选择比较寄存器
			  1|comp-
        term―0|>=  选择比较寄存器 
			  1|<   
返回值         0：正确          1：错误
**********************************************************************/


int _stdcall set_comp_pmove2(int cardno, int axis, int axis1,int axis2, long pulse, long pulse1,long pulse2, int regi, int term);
/**********************到达目标位置两轴驱动设置************************
功能:到达目标位置两轴驱动设置
参数:
		axis―主动轴
		axis1―从动轴1
		axis2―从动轴2
		pulse―主动轴的目标位置
		pulse1―从动轴1的驱动脉冲
		pulse2―从动轴2的驱动脉冲
		regi―0|comp+  选择比较寄存器
			  1|comp-
        term―0|>=  选择比较寄存器 
			  1|<    
返回值         0：正确          1：错误
**********************************************************************/


int _stdcall set_comp_pmove3(int cardno, int axis, int axis1,int axis2, int axis3, long pulse, long pulse1,long pulse2,long pulse3, int regi, int term);
/**********************到达目标位置三轴驱动设置************************
功能:到达目标位置三轴驱动设置
参数:
		axis―主动轴
		axis1―从动轴1
		axis2―从动轴2
		axis2―从动轴3
		pulse―主动轴的目标位置
		pulse1―从动轴1的驱动脉冲
		pulse2―从动轴2的驱动脉冲
		pulse3―从动轴3的驱动脉冲
		regi―0|comp+  选择比较寄存器
			  1|comp-
        term―0|>=  选择比较寄存器 
			  1|<       
返回值         0：正确          1：错误
**********************************************************************/


int _stdcall set_comp_stop1(int cardno,int axis,int axis1,long pulse,int regi,int term,int mode);
/***********************到达目标位置停止驱动设置***********************
功能:到达目标位置停止驱动设置
参数:
		axis―主动轴
		axis1―从动轴1		
		pulse―主动轴的目标位置		
		regi―0|comp+  选择比较寄存器
			  1|comp-
        term―0|>=  选择比较寄存器 
			  1|<
        mode―|0:主轴停止
			  |1:主轴不停
返回值         0：正确          1：错误
***********************************************************************/

int _stdcall set_comp_stop2(int cardno,int axis,int axis1,int axis2,long pulse,int regi,int term,int mode);
/**********************到达目标位置停止驱动设置************************
功能:到达目标位置停止驱动设置
参数:
		axis―主动轴
		axis1―从动轴1	
		axis2―从动轴2
		pulse―主动轴的目标位置		
		regi―0|comp+  选择比较寄存器
			  1|comp-
        term―0|>=  选择比较寄存器 
			  1|<
        mode―|0:主轴停止
			  |1:主轴不停	
返回值         0：正确          1：错误
***********************************************************************/

int _stdcall set_comp_stop3(int cardno,int axis,long pulse,int regi=0,int term=0,int mode=0);
/***********************到达目标位置停止驱动设置************************
功能:到达目标位置停止驱动设置
参数:
		axis―主动轴		
		pulse―主动轴的目标位置		
		regi―0|comp+  选择比较寄存器
			  1|comp-
        term―0|>=  选择比较寄存器 
			  1|<
        mode―|0:主轴停止
			  |1:主轴不停	
返回值         0：正确          1：错误
***********************************************************************/

//----------------------------------------------------//
//                      复合驱动类                    //
//说明:以下函数是为了方便客户的使用而增加的函数       //
//----------------------------------------------------//

int _stdcall symmetry_relative_move(int cardno, int axis, long pulse, long lspd ,long hspd, double tacc, long vacc, int mode);
/*****************************单轴对称相对运动*************************
*功能:参照当前位置,以对称加减速进行定量移动
*参数:
      cardno-卡号
	  axis---轴号
	  pulse--脉冲
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  vacc---加速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
**********************************************************************/


int _stdcall symmetry_absolute_move(int cardno, int axis, long pulse, long lspd ,long hspd, double tacc, long vacc, int mode);
/****************************单轴对称绝对移动*************************
*功能:参照零点位置,以对称加减速进行定量移动
*参数:
      cardno-卡号 
	  axis---轴号
	  pulse--脉冲
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  vacc---加速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
********************************************************************/



int _stdcall unsymmetry_relative_move(int cardno, int axis, long pulse, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
/**************************单轴非对称相对运动************************
*功能:参照当前位置,以非对称加减速进行定量移动
*参数:
      cardno-卡号
	  axis---轴号
	  pulse--脉冲
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  tdec---减速时间(单位:秒)
	  vacc---加/减速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
*********************************************************************/

int _stdcall unsymmetry_absolute_move(int cardno, int axis, long pulse, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
/*************************单轴非对称绝对运动**************************
*功能:参照零点位置,以非对称加减速进行定量移动
*参数:
      cardno-卡号
	  axis---轴号
	  pulse--脉冲
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  tdec---减速时间(单位:秒)
	  vacc---加速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
********************************************************************/


int _stdcall symmetry_relative_line2(int cardno, int axis1, int axis2, long pulse1, long pulse2, long lspd ,long hspd, double tacc, long vacc, int mode);
/**********************两轴对称直线插补相对移动********************
*功能:参照当前位置,以对称加减速进行直线插补
*参数:
      cardno-卡号
	  axis1---轴号1
	  axis2---轴号2	
	  pulse1--脉冲1
	  pulse2--脉冲2
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  vacc---加速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
******************************************************************/


int _stdcall symmetry_absolute_line2(int cardno, int axis1, int axis2, long pulse1, long pulse2, long lspd ,long hspd, double tacc, long vacc, int mode);
/********************两轴对称直线插补绝对移动**********************
*功能:参照零点位置,以对称加减速进行直线插补
*参数:
      cardno-卡号
	  axis1---轴号1
	  axis2---轴号2	
	  pulse1--脉冲1
	  pulse2--脉冲2
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  vacc---加速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
******************************************************************/


int _stdcall unsymmetry_relative_line2(int cardno, int axis1, int axis2, long pulse1, long pulse2, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
/********************两轴非对称直线插补相对移动********************
*功能:参照当前位置,以非对称加减速进行直线插补
*参数:
      cardno-卡号
	  axis1---轴号1
	  axis2---轴号2	
	  pulse1--脉冲1
	  pulse2--脉冲2
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  tdec---减速时间(单位:秒)
	  vacc---加/减速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
******************************************************************/

int _stdcall unsymmetry_absolute_line2(int cardno, int axis1, int axis2, long pulse1, long pulse2, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
/*******************两轴非对称直线插补绝对移动*********************
*功能:参照零点位置,以非对称加减速进行直线插补
*参数:
      cardno-卡号
	  axis1---轴号1
	  axis2---轴号2	
	  pulse1--脉冲1
	  pulse2--脉冲2
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  tdec---减速时间(单位:秒)
	  vacc---加速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
******************************************************************/

int _stdcall symmetry_relative_line3(int cardno, int axis1, int axis2, int axis3, long pulse1, long pulse2, long pulse3, long lspd ,long hspd, double tacc, long vacc, int mode);
/**********************三轴对称直线插补相对运动********************
*功能:参照当前位置,以对称加减速进行直线插补
*参数:
      cardno-卡号
	  axis1---轴号1
	  axis2---轴号2	
	  axis3---轴号3	
	  pulse1--脉冲1
	  pulse2--脉冲2
	  pulse3--脉冲3
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  vacc---加速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
******************************************************************/

int _stdcall symmetry_absolute_line3(int cardno, int axis1, int axis2, int axis3, long pulse1, long pulse2, long pulse3, long lspd ,long hspd, double tacc, long vacc, int mode);
/*********************三轴对称直线插补绝对运动*********************
功能:参照零点位置,以对称加减速进行直线插补
参数:
      cardno-卡号
	  axis1---轴号1
	  axis2---轴号2	
	  axis3---轴号3
	  pulse1--脉冲1
	  pulse2--脉冲2
	  pulse3--脉冲3
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  vacc---加速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
******************************************************************/

int _stdcall unsymmetry_relative_line3(int cardno, int axis1, int axis2, int axis3, long pulse1, long pulse2, long pulse3, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
/*********************三轴非对称直线插补相对运动*******************
功能:参照当前位置,以非对称加减速进行直线插补
参数:
      cardno-卡号
	  axis1---轴号1
	  axis2---轴号2	
	  axis3---轴号3	
	  pulse1--脉冲1
	  pulse2--脉冲2
	  pulse3--脉冲3
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  tdec---减速时间(单位:秒)
	  vacc---加速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
******************************************************************/



int _stdcall unsymmetry_absolute_line3(int cardno, int axis1, int axis2, int axis3, long pulse1, long pulse2, long pulse3, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
/**********************三轴非对称直线插补绝对运动******************
*功能:参照零点位置,以非对称加减速进行直线插补
*参数:
      cardno-卡号
	  axis1---轴号1
	  axis2---轴号2	
	  axis3---轴号3
	  pulse1--脉冲1
	  pulse2--脉冲2
	  pulse3--脉冲3
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  tdec---减速时间(单位:秒)
	  vacc---加速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
******************************************************************/

int _stdcall symmetry_relative_arc(int cardno, int axis1, int axis2, long x, long y, long i, long j, int dir, long lspd ,long hspd, double tacc, long vacc, int mode);
/********************两轴对称圆弧插补相对移动**********************
功能:参照当前位置,以对称加减速进行圆弧插补
参数:
      cardno-卡号
	  axis1---轴号1
	  axis2---轴号2	
	  x、y----圆弧终点坐标(参照当前点,即圆弧起点)
	  i、j----圆心坐标(参照当前点,即圆弧起点)
	  dir-----运动方向(0-顺时针,1-逆时针)
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  vacc---加速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
******************************************************************/

int _stdcall symmetry_absolute_arc(int cardno, int axis1, int axis2, long x, long y, long i, long j, int dir, long lspd ,long hspd, double tacc, long vacc, int mode);
/**********************两轴对称圆弧插补绝对移动********************
功能:参照零点位置,以对称加减速进行圆弧插补
参数:
      cardno-卡号
	  axis1---轴号1
	  axis2---轴号2	
	  x、y----圆弧终点坐标
	  i、j----圆心坐标
	  dir-----运动方向(0-顺时针,1-逆时针)
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  vacc---加速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
******************************************************************/


int _stdcall unsymmetry_relative_arc(int cardno, int axis1, int axis2, long x, long y, long i, long j, int dir, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
/**********************两轴非对称圆弧插补相对移动******************
功能:参照当前位置,以非对称加减速进行圆弧插补
参数:
      cardno-卡号
	  axis1---轴号1
	  axis2---轴号2	
	  x、y----圆弧终点坐标(参照当前点,即圆弧起点)
	  i、j----圆心坐标(参照当前点,即圆弧起点)
	  dir-----运动方向(0-顺时针,1-逆时针)
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  tdec---减速时间(单位:秒)
	  vacc---加速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
******************************************************************/

int _stdcall unsymmetry_absolute_arc(int cardno, int axis1, int axis2, long x, long y, long i, long j, int dir, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
/*********************两轴非对称圆弧插补绝对移动*******************
功能:参照零点位置,以非对称加减速进行圆弧插补
参数:
      cardno-卡号
	  axis1---轴号1
	  axis2---轴号2	
	  x、y----圆弧终点坐标
	  i、j----圆心坐标
	  dir-----运动方向(0-顺时针,1-逆时针)
	  lspd---低速
	  hspd---高速
      tacc---加速时间(单位:秒)
	  tdec---减速时间(单位:秒)
	  vacc---加速度变化率
	  mode---模式(梯形(0)还是S曲线(1))
返回值         0：正确          1：错误
******************************************************************/

//----------------------------------------------------//
//                开关量输入/输出函数                 //
//----------------------------------------------------//

int _stdcall read_bit(int cardno,int number);
/****************************读单个输入点**************************
功能：获取单个输入点的状态
参数：
	cardno	   卡号
	number	   输入点（0-34）
返回值	       0：低电平		   1：高电平		   -1：错误
******************************************************************/

int _stdcall write_bit(int cardno,int number,int value);
/*****************************输出单点*****************************
功能：对相应的端口进行输出操作
参数：
	cardno	   卡号
	number	   输出点（0-31）
	value	   0：低		        1：高
返回值	       0：正确 				1：错误
输出数对应相应的输出号。
******************************************************************/


//*********************************************//
//               回原点                        //
//*********************************************//

int _stdcall SetHomeMode_Ex(int m_nCardNum,int m_nAxisNum,int m_nHomeDir, int m_nStop0Active,int m_nLimitActive,int m_nStop1Active,
						   long m_nBackRange,long m_nEncoderZRange,long m_nOffset);
///////////////////////////////////////////////////
//功能：设置回零信号，步骤参数
//参数：
// 	int    m_nCardNum		//卡号
// 	int    m_nAxisNum		//轴号
// 	int    m_nHomeDir		//回零方向 0:负方向 1:正方向
// 	int    m_nStop0Active	//stop0 有效电平设置；0：低电平停止	1：高电平停止
// 	int    m_nLimitActive	//limit信号 有效电平设置；0：低电平停止	1：高电平停止
// 	int    m_nStop1Active	//stop1 有效电平设置；0：低电平停止	1：高电平停止 -1:不启用编码器Z相信号
// 	long   m_nBackRange		//碰到stop0信号后，反向退出stop0的距离 >1
// 	long   m_nEncoderZRange	//编码器Z相范围(电机旋转一圈所需脉冲数，不启用编码器Z相时也需设置成大于1的值) >1
// 	long   m_nOffset		//原点偏移量(回原点成功后是否需要偏移一段位移)；==0不偏移，>0正方向偏移，<0负方向偏移	
//返回值		0：正确					(-1～-8)：错误类型
//错误信息提示
//  -1   //参数1错误
//  -2   //参数2错误
//  -3   //参数3错误
//  -4   //参数4错误
//  -5   //参数5错误
//  -6   //参数6错误
//  -7   //参数7错误
//  -8   //参数8错误
////////////////////////////////////////////////////
int _stdcall SetHomeSpeed_Ex(int m_nCardNum,int m_nAxisNum,long m_nStartSpeed,long m_nSearchSpeed,long m_nHomeSpeed,long m_nAcc,long m_nZPhaseSpeed);
///////////////////////////////////////////////////
//功能：回零速度参数
//参数：
// 	int    m_nCardNum		//卡号
// 	int    m_nAxisNum		//轴号
// 	long   m_nStartSpeed	//原点(STOP0)搜寻起始速度
// 	long   m_nSearchSpeed	//原点搜寻速度
// 	long   m_nHomeSpeed		//低速接近原点速度
// 	long   m_nAcc			//回原点过程中的加速度
// 	long   m_nZPhaseSpeed	//编码器Z相(STOP1)搜寻速度
//返回值		0：正确					-1至-7：错误类型
//错误信息提示
//  -1   //参数1错误
//  -2   //参数2错误
//  -3   //参数3错误
//  -4   //参数4错误
//  -5   //参数5错误
//  -6   //参数6错误
//  -7   //参数7错误
///////////////////////////////////////////////////

int _stdcall HomeProcess_Ex(int m_nCardNum,int m_nAxisNum);
///////////////////////////////////////////////////
//功能：启动回零
//参数：
// 	int    m_nCardNum		//卡号
// 	int    m_nAxisNum		//轴号
//返回值		0：正确					1：错误
//说明	调用该函数时启动回零动作
////////////////////////////////////////////////////

int _stdcall GetHomeStatus_Ex(int m_nCardNum,int m_nAxisNum);
///////////////////////////////////////////////////
//功能：获取回零状态
//参数：
// 	int    m_nCardNum		//卡号
// 	int    m_nAxisNum		//轴号
//返回值:(0-11):回零步骤，(-3至-1)参数错误或回零未启动
//返回值表示回原点步骤：1 :快速接近原点，搜索STOP0
//						2 :检查STOP0是否找到
//						3 :反向退出原点
//						4 :检查反向退出原点是否完成
//						5 :低速接近原点，搜索STOP0
//						6 :检查STOP0搜索是否完成
//						7 :低速接近Z相，搜索STOP1.如果STOP1设置为-1，则跳过7,8两步。
//						8 :检查STOP1搜索是否完成
//						9 :原点偏移
//					   10 :检查原点偏移
//错误信息提示
//  -1       //参数1错误
//  -2       //参数2错误
//  -3       //回零未启动
//  -1000	 //步骤0错误
//  -1001	 //步骤1错误
//  -1002	 //步骤2错误
//  -1003	 //步骤3错误
//  -1004	 //步骤4错误
//  -1005	 //步骤5错误
//  -1006	 //步骤6错误
//  -1007	 //步骤7错误
//  -1008	 //步骤8错误
//  -1009	 //步骤9错误
//  -1010    //步骤10错误
//  -1020    //回零终止						
////////////////////////////////////////////////////

#endif